// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_auth-login_acces_token
 */
export type BodyAuthLoginAccesToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_jobs-create_indexing_job
 */
export type BodyJobsCreateIndexingJob = {
    /**
     * Image File
     * Product image to be indexed
     */
    image_file: Blob | File;
};

/**
 * Body_jobs-create_querying_job
 */
export type BodyJobsCreateQueryingJob = {
    /**
     * Image File
     * Product image to be queried
     */
    image_file: Blob | File;
};

/**
 * BucketName
 */
export type BucketName = 'product' | 'query';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ImageFile
 */
export type ImageFile = {
    /**
     * Id
     */
    id?: string;
    bucket: BucketName;
    /**
     * Path
     */
    path: string;
    /**
     * Filename
     */
    filename: string;
    /**
     * Width
     */
    width: number | null;
    /**
     * Height
     */
    height: number | null;
    /**
     * Format
     */
    format: string | null;
    /**
     * Label
     */
    label?: {
        [key: string]: unknown;
    } | null;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Original Id
     * ID of original image if this is a crop
     */
    original_id?: string | null;
};

/**
 * Job
 */
export type Job = {
    /**
     * Id
     */
    id?: string;
    /**
     * Input Img Id
     */
    input_img_id: string;
    /**
     * Input Product Id
     */
    input_product_id?: string | null;
    type: JobType;
    status: JobStatus;
    /**
     * Processing Details
     * details of the current step or error.
     */
    processing_details?: string | null;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
};

/**
 * JobResponse
 */
export type JobResponse = {
    /**
     * Job Id
     */
    job_id: string;
    status: JobStatus;
    job_type: JobType;
    /**
     * Message
     */
    message?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Result
     */
    result?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Completed
     */
    is_completed: boolean;
    /**
     * Is Failed
     */
    is_failed: boolean;
    /**
     * Is Processing
     */
    is_processing: boolean;
};

/**
 * JobStatus
 */
export type JobStatus = 'queued' | 'started' | 'detecting' | 'labelling' | 'querying' | 'completed' | 'failed';

/**
 * JobType
 */
export type JobType = 'indexing' | 'querying';

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * Product
 */
export type Product = {
    /**
     * Sku
     * Unique SKU code, e.g., LEV501-BL-3232
     */
    sku?: string | null;
    /**
     * Name
     * Product name, e.g., Levi's 501 Jeans
     */
    name: string;
    /**
     * Description
     * Product description, e.g., Blue denim jeans, size 32x32
     */
    description?: string | null;
    /**
     * Price
     */
    price: string;
    /**
     * Id
     */
    id?: string;
};

/**
 * ProductCreate
 */
export type ProductCreate = {
    /**
     * Sku
     * Unique SKU code, e.g., LEV501-BL-3232
     */
    sku?: string | null;
    /**
     * Name
     * Product name, e.g., Levi's 501 Jeans
     */
    name: string;
    /**
     * Description
     * Product description, e.g., Blue denim jeans, size 32x32
     */
    description?: string | null;
    /**
     * Price
     */
    price: number | string;
};

/**
 * ProductImage
 */
export type ProductImage = {
    /**
     * Product Id
     */
    product_id: string;
    /**
     * Image Id
     */
    image_id: string;
    /**
     * Is Primary Crop
     */
    is_primary_crop?: boolean;
};

/**
 * ProductUpdate
 */
export type ProductUpdate = {
    /**
     * Sku
     * Unique SKU code, e.g., LEV501-BL-3232
     */
    sku?: string | null;
    /**
     * Name
     * Product name, e.g., Levi's 501 Jeans
     */
    name?: string | null;
    /**
     * Description
     * Product description, e.g., Blue denim jeans, size 32x32
     */
    description?: string | null;
    /**
     * Price
     * Product price, e.g., 99.99
     */
    price?: number | string | null;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UpdatePassword
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    role?: UserRole;
    /**
     * Id
     */
    id: string;
};

/**
 * UserRegister
 */
export type UserRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * UserRole
 */
export type UserRole = 'admin' | 'client';

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    role?: UserRole;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type AuthLoginAccesTokenData = {
    body: BodyAuthLoginAccesToken;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthLoginAccesTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthLoginAccesTokenError = AuthLoginAccesTokenErrors[keyof AuthLoginAccesTokenErrors];

export type AuthLoginAccesTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type AuthLoginAccesTokenResponse = AuthLoginAccesTokenResponses[keyof AuthLoginAccesTokenResponses];

export type AuthTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/login/test-token';
};

export type AuthTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type AuthTestTokenResponse = AuthTestTokenResponses[keyof AuthTestTokenResponses];

export type AuthRefreshTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/login/refresh-token';
};

export type AuthRefreshTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type AuthRefreshTokenResponse = AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthRegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthRegisterUserError = AuthRegisterUserErrors[keyof AuthRegisterUserErrors];

export type AuthRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type AuthRegisterUserResponse = AuthRegisterUserResponses[keyof AuthRegisterUserResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/users/';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type ImagesGetImageMetadataData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
    };
    query?: never;
    url: '/images/{image_id}';
};

export type ImagesGetImageMetadataErrors = {
    /**
     * Image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImagesGetImageMetadataError = ImagesGetImageMetadataErrors[keyof ImagesGetImageMetadataErrors];

export type ImagesGetImageMetadataResponses = {
    /**
     * Successful Response
     */
    200: ImageFile;
};

export type ImagesGetImageMetadataResponse = ImagesGetImageMetadataResponses[keyof ImagesGetImageMetadataResponses];

export type ImagesListImgsMetadataData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         * Number of items to return
         */
        limit?: number;
        /**
         * Offset
         * Number of items to skip
         */
        offset?: number;
    };
    url: '/images/';
};

export type ImagesListImgsMetadataErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ImagesListImgsMetadataError = ImagesListImgsMetadataErrors[keyof ImagesListImgsMetadataErrors];

export type ImagesListImgsMetadataResponses = {
    /**
     * Response Images-List Imgs Metadata
     * Successful Response
     */
    200: Array<ImageFile>;
};

export type ImagesListImgsMetadataResponse = ImagesListImgsMetadataResponses[keyof ImagesListImgsMetadataResponses];

export type ImagesDownloadImgData = {
    body?: never;
    path: {
        /**
         * Img Id
         * ID of the image to download
         */
        img_id: string;
    };
    query?: never;
    url: '/images/{img_id}/download';
};

export type ImagesDownloadImgErrors = {
    /**
     * Invalid bucket or request
     */
    400: unknown;
    /**
     * Image metadata not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ImagesDownloadImgError = ImagesDownloadImgErrors[keyof ImagesDownloadImgErrors];

export type ImagesDownloadImgResponses = {
    /**
     * Image binary stream
     */
    200: unknown;
};

export type ImagesGetImageCropsData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
    };
    query?: never;
    url: '/images/{image_id}/crops';
};

export type ImagesGetImageCropsErrors = {
    /**
     * Image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ImagesGetImageCropsError = ImagesGetImageCropsErrors[keyof ImagesGetImageCropsErrors];

export type ImagesGetImageCropsResponses = {
    /**
     * Response Images-Get Image Crops
     * Successful Response
     */
    200: Array<ImageFile>;
};

export type ImagesGetImageCropsResponse = ImagesGetImageCropsResponses[keyof ImagesGetImageCropsResponses];

export type ProductsListProductsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Offset
         * Number of items to skip
         */
        offset?: number;
        /**
         * Limit
         * Max number of items to return
         */
        limit?: number;
    };
    url: '/products/';
};

export type ProductsListProductsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsListProductsError = ProductsListProductsErrors[keyof ProductsListProductsErrors];

export type ProductsListProductsResponses = {
    /**
     * Response Products-List Products
     * Successful Response
     */
    200: Array<Product>;
};

export type ProductsListProductsResponse = ProductsListProductsResponses[keyof ProductsListProductsResponses];

export type ProductsCreateProductData = {
    body: ProductCreate;
    path?: never;
    query?: never;
    url: '/products/';
};

export type ProductsCreateProductErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsCreateProductError = ProductsCreateProductErrors[keyof ProductsCreateProductErrors];

export type ProductsCreateProductResponses = {
    /**
     * Successful Response
     */
    201: Product;
};

export type ProductsCreateProductResponse = ProductsCreateProductResponses[keyof ProductsCreateProductResponses];

export type ProductsDeleteProductData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: string;
    };
    query?: never;
    url: '/products/{product_id}';
};

export type ProductsDeleteProductErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsDeleteProductError = ProductsDeleteProductErrors[keyof ProductsDeleteProductErrors];

export type ProductsDeleteProductResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type ProductsDeleteProductResponse = ProductsDeleteProductResponses[keyof ProductsDeleteProductResponses];

export type ProductsGetProductData = {
    body?: never;
    path: {
        /**
         * Product Id
         * ID of the product to retrieve
         */
        product_id: string;
    };
    query?: never;
    url: '/products/{product_id}';
};

export type ProductsGetProductErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsGetProductError = ProductsGetProductErrors[keyof ProductsGetProductErrors];

export type ProductsGetProductResponses = {
    /**
     * Successful Response
     */
    200: Product;
};

export type ProductsGetProductResponse = ProductsGetProductResponses[keyof ProductsGetProductResponses];

export type ProductsUpdateProductData = {
    body: ProductUpdate;
    path: {
        /**
         * Product Id
         */
        product_id: string;
    };
    query?: never;
    url: '/products/{product_id}';
};

export type ProductsUpdateProductErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsUpdateProductError = ProductsUpdateProductErrors[keyof ProductsUpdateProductErrors];

export type ProductsUpdateProductResponses = {
    /**
     * Successful Response
     */
    200: Product;
};

export type ProductsUpdateProductResponse = ProductsUpdateProductResponses[keyof ProductsUpdateProductResponses];

export type ProductsListProductsImagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Offset
         * Number of items to skip
         */
        offset?: number;
        /**
         * Limit
         * Max number of items to return
         */
        limit?: number;
    };
    url: '/products/images/';
};

export type ProductsListProductsImagesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProductsListProductsImagesError = ProductsListProductsImagesErrors[keyof ProductsListProductsImagesErrors];

export type ProductsListProductsImagesResponses = {
    /**
     * Response Products-List Products Images
     * Successful Response
     */
    200: Array<ProductImage>;
};

export type ProductsListProductsImagesResponse = ProductsListProductsImagesResponses[keyof ProductsListProductsImagesResponses];

export type JobsCreateIndexingJobData = {
    body: BodyJobsCreateIndexingJob;
    headers: {
        /**
         * Content-Length
         * Content-Length of the uploaded file
         */
        'content-length': number;
    };
    path?: never;
    query: {
        /**
         * Product Id
         * ID of the product to index
         */
        product_id: string;
    };
    url: '/jobs/indexing';
};

export type JobsCreateIndexingJobErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * File too large
     */
    413: unknown;
    /**
     * Unsupported media type
     */
    415: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type JobsCreateIndexingJobError = JobsCreateIndexingJobErrors[keyof JobsCreateIndexingJobErrors];

export type JobsCreateIndexingJobResponses = {
    /**
     * Successful Response
     */
    201: JobResponse;
};

export type JobsCreateIndexingJobResponse = JobsCreateIndexingJobResponses[keyof JobsCreateIndexingJobResponses];

export type JobsCreateQueryingJobData = {
    body: BodyJobsCreateQueryingJob;
    headers: {
        /**
         * Content-Length
         * Content-Length of the uploaded file
         */
        'content-length': number;
    };
    path?: never;
    query?: never;
    url: '/jobs/querying';
};

export type JobsCreateQueryingJobErrors = {
    /**
     * File too large
     */
    413: unknown;
    /**
     * Unsupported media type
     */
    415: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type JobsCreateQueryingJobError = JobsCreateQueryingJobErrors[keyof JobsCreateQueryingJobErrors];

export type JobsCreateQueryingJobResponses = {
    /**
     * Successful Response
     */
    201: JobResponse;
};

export type JobsCreateQueryingJobResponse = JobsCreateQueryingJobResponses[keyof JobsCreateQueryingJobResponses];

export type JobsGetJobStatusData = {
    body?: never;
    path: {
        /**
         * Job Id
         * ID of the job
         */
        job_id: string;
    };
    query?: never;
    url: '/jobs/{job_id}/status';
};

export type JobsGetJobStatusErrors = {
    /**
     * Job not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type JobsGetJobStatusError = JobsGetJobStatusErrors[keyof JobsGetJobStatusErrors];

export type JobsGetJobStatusResponses = {
    /**
     * Successful Response
     */
    200: JobResponse;
};

export type JobsGetJobStatusResponse = JobsGetJobStatusResponses[keyof JobsGetJobStatusResponses];

export type JobsListJobsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         * Filter by job status
         */
        status?: JobStatus | null;
        /**
         * Job Type
         * Filter by job type
         */
        job_type?: JobType | null;
        /**
         * Limit
         * Number of jobs to return
         */
        limit?: number;
        /**
         * Offset
         * Number of jobs to skip
         */
        offset?: number;
    };
    url: '/jobs/';
};

export type JobsListJobsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal server error
     */
    500: unknown;
};

export type JobsListJobsError = JobsListJobsErrors[keyof JobsListJobsErrors];

export type JobsListJobsResponses = {
    /**
     * Response Jobs-List Jobs
     * Successful Response
     */
    200: Array<Job>;
};

export type JobsListJobsResponse = JobsListJobsResponses[keyof JobsListJobsResponses];

export type JobsCancelJobData = {
    body?: never;
    path: {
        /**
         * Job Id
         */
        job_id: string;
    };
    query?: never;
    url: '/jobs/{job_id}';
};

export type JobsCancelJobErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type JobsCancelJobError = JobsCancelJobErrors[keyof JobsCancelJobErrors];

export type JobsCancelJobResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type JobsRetryFailedJobData = {
    body?: never;
    path: {
        /**
         * Job Id
         */
        job_id: string;
    };
    query?: never;
    url: '/jobs/{job_id}/retry';
};

export type JobsRetryFailedJobErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type JobsRetryFailedJobError = JobsRetryFailedJobErrors[keyof JobsRetryFailedJobErrors];

export type JobsRetryFailedJobResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};