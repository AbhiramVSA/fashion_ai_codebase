// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from './client';
import type { AuthLoginAccesTokenData, AuthLoginAccesTokenResponses, AuthLoginAccesTokenErrors, AuthTestTokenData, AuthTestTokenResponses, AuthRefreshTokenData, AuthRefreshTokenResponses, AuthRegisterUserData, AuthRegisterUserResponses, AuthRegisterUserErrors, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersUpdateUserMeData, UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, UsersDeleteUserData, UsersDeleteUserResponses, UsersDeleteUserErrors, UsersReadUserByIdData, UsersReadUserByIdResponses, UsersReadUserByIdErrors, UsersUpdateUserData, UsersUpdateUserResponses, UsersUpdateUserErrors, UsersReadUsersData, UsersReadUsersResponses, UsersReadUsersErrors, ImagesGetImageMetadataData, ImagesGetImageMetadataResponses, ImagesGetImageMetadataErrors, ImagesListImgsMetadataData, ImagesListImgsMetadataResponses, ImagesListImgsMetadataErrors, ImagesDownloadImgData, ImagesDownloadImgResponses, ImagesDownloadImgErrors, ImagesGetImageCropsData, ImagesGetImageCropsResponses, ImagesGetImageCropsErrors, ProductsListProductsData, ProductsListProductsResponses, ProductsListProductsErrors, ProductsCreateProductData, ProductsCreateProductResponses, ProductsCreateProductErrors, ProductsDeleteProductData, ProductsDeleteProductResponses, ProductsDeleteProductErrors, ProductsGetProductData, ProductsGetProductResponses, ProductsGetProductErrors, ProductsUpdateProductData, ProductsUpdateProductResponses, ProductsUpdateProductErrors, ProductsListProductsImagesData, ProductsListProductsImagesResponses, ProductsListProductsImagesErrors, JobsCreateIndexingJobData, JobsCreateIndexingJobResponses, JobsCreateIndexingJobErrors, JobsCreateQueryingJobData, JobsCreateQueryingJobResponses, JobsCreateQueryingJobErrors, JobsGetJobStatusData, JobsGetJobStatusResponses, JobsGetJobStatusErrors, JobsListJobsData, JobsListJobsResponses, JobsListJobsErrors, JobsCancelJobData, JobsCancelJobResponses, JobsCancelJobErrors, JobsRetryFailedJobData, JobsRetryFailedJobResponses, JobsRetryFailedJobErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Auth {
    /**
     * Login Acces Token
     */
    public static loginAccesToken<ThrowOnError extends boolean = false>(options: Options<AuthLoginAccesTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AuthLoginAccesTokenResponses, AuthLoginAccesTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            responseType: 'json',
            url: '/auth/login',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Test Token
     */
    public static testToken<ThrowOnError extends boolean = false>(options?: Options<AuthTestTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<AuthTestTokenResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/login/test-token',
            ...options
        });
    }
    
    /**
     * Refresh Token
     */
    public static refreshToken<ThrowOnError extends boolean = false>(options?: Options<AuthRefreshTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AuthRefreshTokenResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/login/refresh-token',
            ...options
        });
    }
    
    /**
     * Register User
     */
    public static registerUser<ThrowOnError extends boolean = false>(options: Options<AuthRegisterUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AuthRegisterUserResponses, AuthRegisterUserErrors, ThrowOnError>({
            responseType: 'json',
            url: '/auth/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Users {
    /**
     * Delete User Me
     */
    public static deleteUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     */
    public static readUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     */
    public static updateUserMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Password Me
     */
    public static updatePasswordMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     */
    public static readUserById<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponses, UsersUpdateUserErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Read Users
     */
    public static readUsers<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/users/',
            ...options
        });
    }
}

export class Images {
    /**
     * Get Image Metadata
     * Get image metadata by ID.
     */
    public static getImageMetadata<ThrowOnError extends boolean = false>(options: Options<ImagesGetImageMetadataData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ImagesGetImageMetadataResponses, ImagesGetImageMetadataErrors, ThrowOnError>({
            responseType: 'json',
            url: '/images/{image_id}',
            ...options
        });
    }
    
    /**
     * List Imgs Metadata
     * List image metadata (paginated).
     */
    public static listImgsMetadata<ThrowOnError extends boolean = false>(options?: Options<ImagesListImgsMetadataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ImagesListImgsMetadataResponses, ImagesListImgsMetadataErrors, ThrowOnError>({
            responseType: 'json',
            url: '/images/',
            ...options
        });
    }
    
    /**
     * Download Img
     * Stream image bytes from S3/MinIO to client.
     * Note: if using boto3 (sync) consider offloading to a threadpool to avoid blocking the event loop.
     */
    public static downloadImg<ThrowOnError extends boolean = false>(options: Options<ImagesDownloadImgData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ImagesDownloadImgResponses, ImagesDownloadImgErrors, ThrowOnError>({
            url: '/images/{img_id}/download',
            ...options
        });
    }
    
    /**
     * Get Image Crops
     * Get all crops for an image.
     * Returns a list of crop objects (replace with real model when available).
     */
    public static getImageCrops<ThrowOnError extends boolean = false>(options: Options<ImagesGetImageCropsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ImagesGetImageCropsResponses, ImagesGetImageCropsErrors, ThrowOnError>({
            responseType: 'json',
            url: '/images/{image_id}/crops',
            ...options
        });
    }
}

export class Products {
    /**
     * List Products
     * Retrieve a list of products with pagination.
     */
    public static listProducts<ThrowOnError extends boolean = false>(options?: Options<ProductsListProductsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ProductsListProductsResponses, ProductsListProductsErrors, ThrowOnError>({
            responseType: 'json',
            url: '/products/',
            ...options
        });
    }
    
    /**
     * Create Product
     * Create a new product. Requires authenticated user.
     */
    public static createProduct<ThrowOnError extends boolean = false>(options: Options<ProductsCreateProductData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ProductsCreateProductResponses, ProductsCreateProductErrors, ThrowOnError>({
            responseType: 'json',
            url: '/products/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Product
     * Delete a product. Requires authenticated user.
     */
    public static deleteProduct<ThrowOnError extends boolean = false>(options: Options<ProductsDeleteProductData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<ProductsDeleteProductResponses, ProductsDeleteProductErrors, ThrowOnError>({
            url: '/products/{product_id}',
            ...options
        });
    }
    
    /**
     * Get Product
     * Get a single product by its ID.
     */
    public static getProduct<ThrowOnError extends boolean = false>(options: Options<ProductsGetProductData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ProductsGetProductResponses, ProductsGetProductErrors, ThrowOnError>({
            responseType: 'json',
            url: '/products/{product_id}',
            ...options
        });
    }
    
    /**
     * Update Product
     * Update an existing product. Requires authenticated user.
     */
    public static updateProduct<ThrowOnError extends boolean = false>(options: Options<ProductsUpdateProductData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<ProductsUpdateProductResponses, ProductsUpdateProductErrors, ThrowOnError>({
            responseType: 'json',
            url: '/products/{product_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Products Images
     * Retrieve a list of product images with pagination.
     */
    public static listProductsImages<ThrowOnError extends boolean = false>(options?: Options<ProductsListProductsImagesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ProductsListProductsImagesResponses, ProductsListProductsImagesErrors, ThrowOnError>({
            responseType: 'json',
            url: '/products/images/',
            ...options
        });
    }
}

export class Jobs {
    /**
     * Create Indexing Job
     * Create a new indexing job. Handles image upload, validates and starts processing.
     */
    public static createIndexingJob<ThrowOnError extends boolean = false>(options: Options<JobsCreateIndexingJobData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<JobsCreateIndexingJobResponses, JobsCreateIndexingJobErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/jobs/indexing',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Create Querying Job
     * Create a new querying job. Handles image upload, validates and starts processing.
     */
    public static createQueryingJob<ThrowOnError extends boolean = false>(options: Options<JobsCreateQueryingJobData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<JobsCreateQueryingJobResponses, JobsCreateQueryingJobErrors, ThrowOnError>({
            ...formDataBodySerializer,
            responseType: 'json',
            url: '/jobs/querying',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Get Job Status
     * Get job status with optional results - optimized for frontend polling.
     */
    public static getJobStatus<ThrowOnError extends boolean = false>(options: Options<JobsGetJobStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<JobsGetJobStatusResponses, JobsGetJobStatusErrors, ThrowOnError>({
            responseType: 'json',
            url: '/jobs/{job_id}/status',
            ...options
        });
    }
    
    /**
     * List Jobs
     * List jobs with optional filtering.
     */
    public static listJobs<ThrowOnError extends boolean = false>(options?: Options<JobsListJobsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<JobsListJobsResponses, JobsListJobsErrors, ThrowOnError>({
            responseType: 'json',
            url: '/jobs/',
            ...options
        });
    }
    
    /**
     * Cancel Job
     * Cancel a running job
     */
    public static cancelJob<ThrowOnError extends boolean = false>(options: Options<JobsCancelJobData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<JobsCancelJobResponses, JobsCancelJobErrors, ThrowOnError>({
            responseType: 'json',
            url: '/jobs/{job_id}',
            ...options
        });
    }
    
    /**
     * Retry Failed Job
     * Retry a failed job
     */
    public static retryFailedJob<ThrowOnError extends boolean = false>(options: Options<JobsRetryFailedJobData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<JobsRetryFailedJobResponses, JobsRetryFailedJobErrors, ThrowOnError>({
            responseType: 'json',
            url: '/jobs/{job_id}/retry',
            ...options
        });
    }
}