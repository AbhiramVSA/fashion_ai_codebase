services:
    #Infra Services
    traefik:
        image: traefik:v3.4
        container_name: traefik_proxy
        command:
            # Enable Docker in Traefik, so that it reads labels from Docker services
            - --providers.docker
            - --api.dashboard=true
            - --api.insecure=true # Removed in prod
            - --providers.docker.exposedbydefault=false
            - --entrypoints.web.address=:80
            - --entrypoints.traefik.address=:8080
        ports:
            - "80:80"
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - app-network
        deploy:
            mode: global
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefik.enable=false

    postgres:
        image: postgres:16 # lets check alpine version later
        container_name: postgres_db
        environment:
            - POSTGRES_USER=${DATABASE_USERNAME}
            - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
            - POSTGRES_DB=${DATABASE_NAME}
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - app-network
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            replicas: 1
            labels:
                - traefik.enable=false

    redis:
        image: redis:7-alpine
        container_name: redis_broker
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
    minio:
        image: minio/minio:RELEASE.2023-09-07T02-05-02Z
        container_name: minio_storage
        command: server /data --console-address ":9001"
        ports: 
            - "9000:9000"
            - "9001:9001"
        volumes: 
            - minio_data:/data
        environment: 
            - MINIO_ROOT_USER=${S3_ACCESS_KEY}
            - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
        networks:
            - app-network
        healthcheck:
            test:
                ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        deploy:
            labels:
                - "traefik.enable=false" #not expose directly. accessed via SDK
    #service to create minIO buckets on startup
    create-buckets:
        image: minio/mc
        depends_on:
            minio:
                condition: service_healthy
        networks:
            - app-network
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
            /usr/bin/mc mb local/${S3_PRODUCT_BUCKET_NAME} --ignore-existing;
            /usr/bin/mc mb local/query-images --ignore-existing;
            /usr/bin/mc policy set public local/${S3_PRODUCT_BUCKET_NAME};
            exit 0;
            "

    #Aplication Services
    ml_service:
        image: ${DOCKER_IMAGE_ML_SERVICE?Variable not set:latest}
        build:
            context: ./ml_service
            dockerfile: Dockerfile
        container_name: fashion_ml_service
        environment:
            - PROJECT_NAME=${PROJECT_NAME}
        volumes:
            - ./ml_service/app:/app
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.ml_service.rule=Host(`ml_service.docker.localhost`)"
            - "traefik.http.routers.ml_service.entrypoints=web"
            - "traefik.http.services.ml_service.loadbalancer.server.port=8080" # <-- Internal Port from Fastapi
        networks:
            - app-network
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: 1
                          capabilities: [gpu]
    backend_api:
        image: "${DOCKER_IMAGE_BACKEND?Variable not set:latest}"
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: fashion_ai_backend
        command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --app-dir /app

        volumes:
            - ./backend/app:/app
        environment:
            - PROJECT_NAME=${PROJECT_NAME}
            # --- Database Config ---
            - DATABASE_USERNAME=${DATABASE_USERNAME}
            - DATABASE_PASSWORD=${DATABASE_PASSWORD}
            - DATABASE_HOST=postgres
            - DATABASE_NAME=${DATABASE_NAME}
            - DATABASE_PORT=5432
            # --- Celery & Storage Config ---
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/1
            - S3_ENDPOINT_URL=http://minio:9000
            - S3_ACCESS_KEY=${S3_ACCESS_KEY}
            - S3_SECRET_KEY=${S3_SECRET_KEY}
            - S3_PRODUCT_BUCKET_NAME=${S3_PRODUCT_BUCKET_NAME}
            - ML_SERVICE_URL=http://ml_service:8080 # Internal communication
            # --- Other Secrets ---
            - ADMIN_USER=${ADMIN_USER}
            - ADMIN_PASSWORD=${ADMIN_PASSWORD}
            - ALGORITHM=${ALGORITHM}
            - SECRET_KEY=${SECRET_KEY}
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - app-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.backend_api.rule=Host(`backend.docker.localhost`)"
            - "traefik.http.routers.backend_api.entrypoints=web"
            - "traefik.http.services.backend_api.loadbalancer.server.port=8000"
    worker:
        image: "${DOCKER_IMAGE_BACKEND?Variable not set:latest}"
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: fashion_celery_worker
        command: celery -A celery_app:app worker -l info -Q default -c 1 # Concurrency 1
        volumes:
            - ./backend/app:/app
        environment:
            - PROJECT_NAME=${PROJECT_NAME}
            # --- Database Config ---
            - DATABASE_USERNAME=${DATABASE_USERNAME}
            - DATABASE_PASSWORD=${DATABASE_PASSWORD}
            - DATABASE_HOST=postgres
            - DATABASE_NAME=${DATABASE_NAME}
            - DATABASE_PORT=5432
            # --- Celery & Storage Config ---
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/1
            - S3_ENDPOINT_URL=http://minio:9000
            - S3_ACCESS_KEY=${S3_ACCESS_KEY}
            - S3_SECRET_KEY=${S3_SECRET_KEY}
            - S3_PRODUCT_BUCKET_NAME=${S3_PRODUCT_BUCKET_NAME}
            - ML_SERVICE_URL=http://ml_service:8080 # Internal communication
            # --- Other Secrets ---
            - ADMIN_USER=${ADMIN_USER}
            - ADMIN_PASSWORD=${ADMIN_PASSWORD}
            - ALGORITHM=${ALGORITHM}
            - SECRET_KEY=${SECRET_KEY}
        depends_on:
            - backend_api #ensure build context is shared, dependes on DB/REDIS implicitly
            - redis
            - postgres
        networks:
            - app-network
        deploy:
            labels:
                - "traefik.enable=false" #worker is not a web service but a midleman betwen the backend and ml service

#Database Volume
volumes:
    pgdata:
    minio_data:

#NetWork
networks:
    app-network:
        driver: bridge
